from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from datetime import datetime

# Initialize Flask app
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///powerbank.db'  # SQLite database
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = 'your-secret-key'  # Replace with a secure key in production

# Initialize database and JWT
db = SQLAlchemy(app)
jwt = JWTManager(app)

# Database Models
## User Model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(100), nullable=False)  # Use hashed passwords in production
    email = db.Column(db.String(100), unique=True, nullable=False)

## Station Model
class Station(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    location = db.Column(db.String(200), nullable=False)

## Power Bank Model
class PowerBank(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    station_id = db.Column(db.Integer, db.ForeignKey('station.id'), nullable=False)
    status = db.Column(db.String(20), default='available')  # 'available' or 'rented'

## Rental Model
class Rental(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    power_bank_id = db.Column(db.Integer, db.ForeignKey('power_bank.id'), nullable=False)
    start_time = db.Column(db.DateTime, default=datetime.utcnow)
    end_time = db.Column(db.DateTime)
    status = db.Column(db.String(20), default='ongoing')  # 'ongoing' or 'completed'

# User Authentication Endpoints
## Register a new user
@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')
    email = data.get('email')

    if User.query.filter_by(username=username).first():
        return jsonify({'message': 'Username already exists'}), 400
    if User.query.filter_by(email=email).first():
        return jsonify({'message': 'Email already exists'}), 400

    new_user = User(username=username, password=password, email=email)
    db.session.add(new_user)
    db.session.commit()

    return jsonify({'message': 'User registered successfully'}), 201

## Login and get JWT token
@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    user = User.query.filter_by(username=username).first()
    if not user or user.password != password:
        return jsonify({'message': 'Invalid credentials'}), 401

    access_token = create_access_token(identity=user.id)
    return jsonify({'access_token': access_token}), 200

# Station and Power Bank Management Endpoints
## List all stations
@app.route('/stations', methods=['GET'])
def get_stations():
    stations = Station.query.all()
    return jsonify([{'id': s.id, 'name': s.name, 'location': s.location} for s in stations]), 200

## Get details of a specific station
@app.route('/stations/<int:station_id>', methods=['GET'])
def get_station(station_id):
    station = Station.query.get_or_404(station_id)
    power_banks = PowerBank.query.filter_by(station_id=station_id, status='available').all()
    return jsonify({
        'id': station.id,
        'name': station.name,
        'location': station.location,
        'available_power_banks': [pb.id for pb in power_banks]
    }), 200

# Power Bank Rental Endpoints
## Rent a power bank (authenticated users only)
@app.route('/rent', methods=['POST'])
@jwt_required()
def rent_power_bank():
    user_id = get_jwt_identity()
    data = request.get_json()
    station_id = data.get('station_id')

    power_bank = PowerBank.query.filter_by(station_id=station_id, status='available').first()
    if not power_bank:
        return jsonify({'message': 'No available power banks at this station'}), 404

    new_rental = Rental(user_id=user_id, power_bank_id=power_bank.id)
    power_bank.status = 'rented'
    db.session.add(new_rental)
    db.session.commit()

    return jsonify({'message': 'Power bank rented successfully', 'rental_id': new_rental.id}), 200

## Return a power bank (authenticated users only)
@app.route('/return', methods=['POST'])
@jwt_required()
def return_power_bank():
    user_id = get_jwt_identity()
    data = request.get_json()
    rental_id = data.get('rental_id')
    station_id = data.get('station_id')

    rental = Rental.query.get_or_404(rental_id)
    if rental.user_id != user_id or rental.status != 'ongoing':
        return jsonify({'message': 'Invalid rental'}), 400

    power_bank = PowerBank.query.get(rental.power_bank_id)
    power_bank.status = 'available'
    power_bank.station_id = station_id  # Update to the return station
    rental.end_time = datetime.utcnow()
    rental.status = 'completed'

    # Calculate rental duration and cost (simplified: $1 per hour)
    duration = (rental.end_time - rental.start_time).total_seconds() / 3600  # in hours
    cost = duration * 1.0

    db.session.commit()

    return jsonify({'message': 'Power bank returned successfully', 'cost': cost}), 200

# Run the application and create database tables
if __name__ == '__main__':
    db.create_all()  # Creates the database tables if they don't exist
    app.run(debug=True)
